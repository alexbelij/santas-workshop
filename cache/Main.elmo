Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Common = Elm.Common.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Optimize$RefEq = Elm.Html.Optimize.RefEq.make(_elm),
   $Html$Tags = Elm.Html.Tags.make(_elm),
   $List = Elm.List.make(_elm),
   $Producer = Elm.Producer.make(_elm),
   $Product = Elm.Product.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Stackable = Elm.Stackable.make(_elm),
   $State = Elm.State.make(_elm),
   $String = Elm.String.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var updateDeliveriesSignal = $Time.fps(1);
   var updateProductionSignal = $Time.fps(3);
   var step = F2(function (action,
   state) {
      return function () {
         switch (action.ctor)
         {case "Anything":
            return action._0(state);
            case "Click":
            return _U.replace([["products"
                               ,A3($Stackable.update,
                               $Product.toy,
                               1,
                               state.products)]],
              state);
            case "Deliver":
            return A2($State.deliverWrapped,
              1,
              state);
            case "NoOp": return state;
            case "Purchase":
            return A3($State.purchase,
              action._0,
              action._1,
              state);
            case "UpdateDeliveries":
            return A2($State.updateDeliveries,
              action._0,
              state);
            case "UpdateProduction":
            return A2($State.updateProduction,
              action._0,
              state);
            case "Wrap":
            return _U.replace([["products"
                               ,A3($Product.wrap,
                               action._0,
                               1,
                               state.products)]],
              state);}
         _E.Case($moduleName,
         "between lines 113 and 121");
      }();
   });
   var Anything = function (a) {
      return {ctor: "Anything"
             ,_0: a};
   };
   var Purchase = F2(function (a,
   b) {
      return {ctor: "Purchase"
             ,_0: a
             ,_1: b};
   });
   var Deliver = {ctor: "Deliver"};
   var Wrap = function (a) {
      return {ctor: "Wrap",_0: a};
   };
   var Click = {ctor: "Click"};
   var UpdateDeliveries = function (a) {
      return {ctor: "UpdateDeliveries"
             ,_0: a};
   };
   var UpdateProduction = function (a) {
      return {ctor: "UpdateProduction"
             ,_0: a};
   };
   var NoOp = {ctor: "NoOp"};
   var actionInput = $Graphics$Input.input(NoOp);
   var state = function () {
      var actionSignals = _L.fromArray([actionInput.signal
                                       ,A2($Signal._op["<~"],
                                       UpdateProduction,
                                       updateProductionSignal)
                                       ,A2($Signal._op["<~"],
                                       UpdateDeliveries,
                                       updateDeliveriesSignal)]);
      return A2($Signal.foldp,
      step,
      $State.startState)($Signal.merges(actionSignals));
   }();
   var testButtons = A2($Html$Tags.div,
   _L.fromArray([]),
   _L.fromArray([A2($Html$Tags.button,
                _L.fromArray([A2($Html$Events.onclick,
                actionInput.handle,
                $Basics.always(Click))]),
                _L.fromArray([$Html.text("Create Toy")]))
                ,A2($Html$Tags.button,
                _L.fromArray([A2($Html$Events.onclick,
                actionInput.handle,
                $Basics.always(Wrap($Product.toy)))]),
                _L.fromArray([$Html.text("Wrap Toy")]))
                ,A2($Html$Tags.button,
                _L.fromArray([A2($Html$Events.onclick,
                actionInput.handle,
                $Basics.always(Deliver))]),
                _L.fromArray([$Html.text("Deliver Present")]))]));
   var displayProducers = function (producers) {
      return $Html$Tags.ul(_L.fromArray([]))(A2($List.map,
      function ($) {
         return function (x) {
            return A2($Html$Tags.li,
            _L.fromArray([]),
            _L.fromArray([x]));
         }($Html.text(function (_v7) {
            return function () {
               switch (_v7.ctor)
               {case "_Tuple2":
                  return _L.append($String.show(_v7._1),
                    _L.append("x ",
                    $Common.name(_v7._0)));}
               _E.Case($moduleName,
               "on line 40, column 31 to 62");
            }();
         }($)));
      },
      producers));
   };
   var displayProducts = function (products) {
      return function () {
         var listElements = A2($List.map,
         function ($) {
            return function (x) {
               return A2($Html$Tags.li,
               _L.fromArray([]),
               _L.fromArray([x]));
            }($Html.text(function (_v11) {
               return function () {
                  switch (_v11.ctor)
                  {case "_Tuple2":
                     return _L.append($String.show(_v11._1),
                       _L.append("x ",
                       $Common.name(_v11._0)));}
                  _E.Case($moduleName,
                  "on line 32, column 41 to 72");
               }();
            }($)));
         },
         products);
         return A2($Html$Tags.div,
         _L.fromArray([]),
         _L.fromArray([A2($Html$Tags.ul,
         _L.fromArray([]),
         listElements)]));
      }();
   };
   var displayPurchasableProducer = F2(function (purchasableProducer,
   producers) {
      return function () {
         var producer = _U.remove("cost",
         purchasableProducer);
         var cost = $Producer.cost(purchasableProducer)(A2($Stackable.count,
         producer,
         producers));
         var name = $Common.name(producer);
         return A2($Html$Tags.div,
         _L.fromArray([]),
         _L.fromArray([$Html.text(name)
                      ,displayProducts(cost)
                      ,A2($Html$Tags.div,
                      _L.fromArray([]),
                      _L.fromArray([A2($Html$Tags.button,
                                   _L.fromArray([A2($Html$Events.onclick,
                                   actionInput.handle,
                                   $Basics.always(A2(Purchase,
                                   purchasableProducer,
                                   1)))]),
                                   _L.fromArray([$Html.text("Purchase 1x")]))
                                   ,A2($Html$Tags.button,
                                   _L.fromArray([A2($Html$Events.onclick,
                                   actionInput.handle,
                                   $Basics.always(A2(Purchase,
                                   purchasableProducer,
                                   10)))]),
                                   _L.fromArray([$Html.text("Purchase 10x")]))]))]));
      }();
   });
   var displayPurchasableProducers = function (producers) {
      return $Html$Tags.div(_L.fromArray([]))(A2($List.map,
      A2($Basics.flip,
      displayPurchasableProducer,
      producers),
      $Producer.producers));
   };
   var displayDeliveredPresents = function (state) {
      return $Html.text($List.concat(_L.fromArray(["DELIVERED PRESENTS: "
                                                  ,$String.show(state.deliveredPresents)])));
   };
   var displayTitle = A2($Html$Tags.h1,
   _L.fromArray([]),
   _L.fromArray([$Html.text("SANTA\'S WORKSHOP")]));
   var display = function (state) {
      return A2($Html$Tags.div,
      _L.fromArray([$Html.style(_L.fromArray([A2($Html.prop,
      "margin",
      "1em")]))]),
      _L.fromArray([displayTitle
                   ,A2($Html$Tags.main$,
                   _L.fromArray([]),
                   _L.fromArray([A2($Html$Optimize$RefEq.lazy,
                                displayDeliveredPresents,
                                state)
                                ,testButtons
                                ,A2($Html$Optimize$RefEq.lazy,
                                displayPurchasableProducers,
                                state.producers)
                                ,A2($Html$Optimize$RefEq.lazy,
                                displayProducts,
                                state.products)
                                ,A2($Html$Optimize$RefEq.lazy,
                                displayProducers,
                                state.producers)]))]));
   };
   var scene = F2(function (state,
   _v15) {
      return function () {
         switch (_v15.ctor)
         {case "_Tuple2":
            return A4($Graphics$Element.container,
              _v15._0,
              _v15._1,
              $Graphics$Element.midTop,
              A3($Html.toElement,
              _v15._0,
              _v15._1,
              display(state)));}
         _E.Case($moduleName,
         "on line 142, column 22 to 72");
      }();
   });
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   scene,
   state),
   $Window.dimensions);
   _elm.Main.values = {_op: _op
                      ,displayTitle: displayTitle
                      ,displayDeliveredPresents: displayDeliveredPresents
                      ,displayProducts: displayProducts
                      ,displayProducers: displayProducers
                      ,displayPurchasableProducers: displayPurchasableProducers
                      ,displayPurchasableProducer: displayPurchasableProducer
                      ,testButtons: testButtons
                      ,display: display
                      ,NoOp: NoOp
                      ,UpdateProduction: UpdateProduction
                      ,UpdateDeliveries: UpdateDeliveries
                      ,Click: Click
                      ,Wrap: Wrap
                      ,Deliver: Deliver
                      ,Purchase: Purchase
                      ,Anything: Anything
                      ,step: step
                      ,actionInput: actionInput
                      ,updateProductionSignal: updateProductionSignal
                      ,updateDeliveriesSignal: updateDeliveriesSignal
                      ,state: state
                      ,scene: scene
                      ,main: main};
   return _elm.Main.values;
};