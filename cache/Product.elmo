Elm.Product = Elm.Product || {};
Elm.Product.make = function (_elm) {
   "use strict";
   _elm.Product = _elm.Product || {};
   if (_elm.Product.values)
   return _elm.Product.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Product",
   $Basics = Elm.Basics.make(_elm),
   $Common = Elm.Common.make(_elm),
   $List = Elm.List.make(_elm),
   $Stackable = Elm.Stackable.make(_elm);
   var wrappable = {_: {}
                   ,wrappable: true
                   ,wrapped: false};
   var toy = $Common.Named("Toy")(wrappable);
   var consumable = {_: {}
                    ,wrappable: false
                    ,wrapped: false};
   var wrapped = $Common.Named("Wrapped Present")(_U.replace([["wrapped"
                                                              ,true]],
   consumable));
   var wrap = F3(function (product,
   amount,
   products) {
      return function () {
         var _v0 = product.wrappable;
         switch (_v0)
         {case false: return products;
            case true: return function () {
                 var updates = _L.fromArray([{ctor: "_Tuple2"
                                             ,_0: product
                                             ,_1: 0 - amount}
                                            ,{ctor: "_Tuple2"
                                             ,_0: wrapped
                                             ,_1: amount}]);
                 var remaining = A2($Stackable.count,
                 product,
                 products);
                 return _U.cmp(remaining - amount,
                 0) > -1 ? A3($List.foldr,
                 $Basics.uncurry($Stackable.update),
                 products,
                 updates) : products;
              }();}
         _E.Case($moduleName,
         "between lines 37 and 44");
      }();
   });
   var christmasSpirit = $Common.Named("Christmas Spirit")(consumable);
   var santasBlessing = $Common.Named("Santa\'s Blessing")(consumable);
   _elm.Product.values = {_op: _op
                         ,consumable: consumable
                         ,wrappable: wrappable
                         ,wrapped: wrapped
                         ,christmasSpirit: christmasSpirit
                         ,santasBlessing: santasBlessing
                         ,toy: toy
                         ,wrap: wrap};
   return _elm.Product.values;
};